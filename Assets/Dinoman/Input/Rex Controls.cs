//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Dinoman/Input/Rex Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @RexControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RexControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Rex Controls"",
    ""maps"": [
        {
            ""name"": ""Rex"",
            ""id"": ""efb8f579-d6b0-41b6-b719-98e634be8965"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""26e60838-3193-471d-b1f9-36998ab0e119"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Growl"",
                    ""type"": ""Button"",
                    ""id"": ""eb9d8dc5-43ea-491c-b2de-9f1317f7cda2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""65bd16b6-a5f9-4429-ae0a-3b36682a798f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Eat"",
                    ""type"": ""Button"",
                    ""id"": ""b772b0de-6fb6-4a36-90eb-6c53b3dc193c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3dfcaae9-b179-4659-b7bd-a787742eb14e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20e73da2-f597-4034-8fe8-13dce18f94b8"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Growl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""61437c79-045a-4c03-9adc-4802e0ac7ecf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dc07aa7d-e325-4635-bfe9-791bb93a38f3"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9c34b42d-0457-4f65-809d-50e319596ea2"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1c119efa-f2e0-4d24-ac69-a794d9fb80e7"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""56eda14e-4fab-4bc9-9dce-478c790464e1"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""40c6b0f7-1070-4ff9-a5d9-d9711d78a67f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Eat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Rex
        m_Rex = asset.FindActionMap("Rex", throwIfNotFound: true);
        m_Rex_Attack = m_Rex.FindAction("Attack", throwIfNotFound: true);
        m_Rex_Growl = m_Rex.FindAction("Growl", throwIfNotFound: true);
        m_Rex_Movement = m_Rex.FindAction("Movement", throwIfNotFound: true);
        m_Rex_Eat = m_Rex.FindAction("Eat", throwIfNotFound: true);
    }

    ~@RexControls()
    {
        Debug.Assert(!m_Rex.enabled, "This will cause a leak and performance issues, RexControls.Rex.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rex
    private readonly InputActionMap m_Rex;
    private List<IRexActions> m_RexActionsCallbackInterfaces = new List<IRexActions>();
    private readonly InputAction m_Rex_Attack;
    private readonly InputAction m_Rex_Growl;
    private readonly InputAction m_Rex_Movement;
    private readonly InputAction m_Rex_Eat;
    public struct RexActions
    {
        private @RexControls m_Wrapper;
        public RexActions(@RexControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Rex_Attack;
        public InputAction @Growl => m_Wrapper.m_Rex_Growl;
        public InputAction @Movement => m_Wrapper.m_Rex_Movement;
        public InputAction @Eat => m_Wrapper.m_Rex_Eat;
        public InputActionMap Get() { return m_Wrapper.m_Rex; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RexActions set) { return set.Get(); }
        public void AddCallbacks(IRexActions instance)
        {
            if (instance == null || m_Wrapper.m_RexActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RexActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Growl.started += instance.OnGrowl;
            @Growl.performed += instance.OnGrowl;
            @Growl.canceled += instance.OnGrowl;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Eat.started += instance.OnEat;
            @Eat.performed += instance.OnEat;
            @Eat.canceled += instance.OnEat;
        }

        private void UnregisterCallbacks(IRexActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Growl.started -= instance.OnGrowl;
            @Growl.performed -= instance.OnGrowl;
            @Growl.canceled -= instance.OnGrowl;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Eat.started -= instance.OnEat;
            @Eat.performed -= instance.OnEat;
            @Eat.canceled -= instance.OnEat;
        }

        public void RemoveCallbacks(IRexActions instance)
        {
            if (m_Wrapper.m_RexActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRexActions instance)
        {
            foreach (var item in m_Wrapper.m_RexActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RexActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RexActions @Rex => new RexActions(this);
    public interface IRexActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnGrowl(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnEat(InputAction.CallbackContext context);
    }
}
